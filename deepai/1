1. what is the best method to optimize but efficient design of RDBMS?

Optimizing and designing an efficient Relational Database Management System (RDBMS) involves applying best practices that enhance performance, scalability, and maintainability. Here are some key methods and strategies:

1. **Normalize Data to Reduce Redundancy (While Considering Denormalization for Performance)**
   - Use normalization (up to an appropriate normal form) to eliminate redundancy and ensure data integrity.
   - For read-heavy systems, selectively denormalize to reduce joins and improve query speed, balancing normalization with performance needs.

2. **Design an Appropriate Schema**
   - Define clear primary keys for each table.
   - Use foreign keys to establish relationships, enforcing referential integrity.
   - Choose suitable data types for each attribute to optimize storage and performance.
   
3. **Indexing**
   - Create indexes on frequently queried columns, especially on primary keys, foreign keys, and columns used in WHERE, JOIN, ORDER BY, and GROUP BY clauses.
   - Use composite indexes for multi-column searches.
   - Be cautious of over-indexing, as it can slow down INSERT, UPDATE, and DELETE operations.

4. **Partitioning and Sharding**
   - Partition large tables horizontally (by range, list, or hash) to improve query performance and manageability.
   - Sharding distributes data across multiple servers for scalability.

5. **Optimize Queries**
   - Write efficient SQL queries; avoid SELECT *.
   - Use query explain plans to identify bottlenecks.
   - Use joins effectively and avoid unnecessary subqueries.

6. **Use Appropriate Storage Engines and Configurations**
   - Choose storage engines (like InnoDB in MySQL) that support transactions and foreign keys.
   - Fine-tune database configuration parameters (buffer pool size, cache sizes, etc.) based on workload.

7. **Implement Caching**
   - Use caching strategies at the application or database level to reduce repeated complex queries.

8. **Regular Maintenance**
   - Periodically analyze and optimize index usage.
   - Perform vacuuming (in PostgreSQL) or similar maintenance to reclaim space and update planner statistics.
   - Backup and monitor database performance continuously.

9. **Concurrency and Locking Strategies**
   - Use transaction isolation levels appropriately.
   - Minimize locking duration to reduce contention.
   - Implement optimistic or pessimistic locking based on application needs.

10. **Design for Scalability**
    - Plan for growth by considering horizontal scaling strategies.
    - Use read replicas for load balancing read operations.

---

### Summary:
**The best method combines a well-structured schema with strategic indexing, query optimization, and regular maintenance.** Start with normalization for data integrity, but balance with selective denormalization for performance. Use indexing wisely, optimize queries based on explain plans, and plan for scalability through partitioning and sharding. Regular monitoring and tuning are crucial for maintaining an efficient RDBMS system.

---

If you need tailored advice for a specific RDBMS (e.g., PostgreSQL, MySQL, SQL Server), I can provide more detailed guidelines.